/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as NotFoundRouteImport } from './routes/$notFound'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as EventsIndexRouteImport } from './routes/events/index'
import { Route as CalendarsIndexRouteImport } from './routes/calendars/index'
import { Route as BranchIndexRouteImport } from './routes/branch/index'
import { Route as EventsNewRouteImport } from './routes/events/new'
import { Route as BranchNewRouteImport } from './routes/branch/new'
import { Route as UsersIdIndexRouteImport } from './routes/users/$id/index'
import { Route as EventsIdIndexRouteImport } from './routes/events/$id/index'
import { Route as BranchIdIndexRouteImport } from './routes/branch/$id/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const NotFoundRoute = NotFoundRouteImport.update({
  id: '/$notFound',
  path: '/$notFound',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarsIndexRoute = CalendarsIndexRouteImport.update({
  id: '/calendars/',
  path: '/calendars/',
  getParentRoute: () => rootRouteImport,
} as any)
const BranchIndexRoute = BranchIndexRouteImport.update({
  id: '/branch/',
  path: '/branch/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsNewRoute = EventsNewRouteImport.update({
  id: '/events/new',
  path: '/events/new',
  getParentRoute: () => rootRouteImport,
} as any)
const BranchNewRoute = BranchNewRouteImport.update({
  id: '/branch/new',
  path: '/branch/new',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIdIndexRoute = UsersIdIndexRouteImport.update({
  id: '/users/$id/',
  path: '/users/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIdIndexRoute = EventsIdIndexRouteImport.update({
  id: '/events/$id/',
  path: '/events/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const BranchIdIndexRoute = BranchIdIndexRouteImport.update({
  id: '/branch/$id/',
  path: '/branch/$id/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$notFound': typeof NotFoundRoute
  '/login': typeof LoginRoute
  '/branch/new': typeof BranchNewRoute
  '/events/new': typeof EventsNewRoute
  '/branch': typeof BranchIndexRoute
  '/calendars': typeof CalendarsIndexRoute
  '/events': typeof EventsIndexRoute
  '/users': typeof UsersIndexRoute
  '/branch/$id': typeof BranchIdIndexRoute
  '/events/$id': typeof EventsIdIndexRoute
  '/users/$id': typeof UsersIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$notFound': typeof NotFoundRoute
  '/login': typeof LoginRoute
  '/branch/new': typeof BranchNewRoute
  '/events/new': typeof EventsNewRoute
  '/branch': typeof BranchIndexRoute
  '/calendars': typeof CalendarsIndexRoute
  '/events': typeof EventsIndexRoute
  '/users': typeof UsersIndexRoute
  '/branch/$id': typeof BranchIdIndexRoute
  '/events/$id': typeof EventsIdIndexRoute
  '/users/$id': typeof UsersIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$notFound': typeof NotFoundRoute
  '/login': typeof LoginRoute
  '/branch/new': typeof BranchNewRoute
  '/events/new': typeof EventsNewRoute
  '/branch/': typeof BranchIndexRoute
  '/calendars/': typeof CalendarsIndexRoute
  '/events/': typeof EventsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/branch/$id/': typeof BranchIdIndexRoute
  '/events/$id/': typeof EventsIdIndexRoute
  '/users/$id/': typeof UsersIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$notFound'
    | '/login'
    | '/branch/new'
    | '/events/new'
    | '/branch'
    | '/calendars'
    | '/events'
    | '/users'
    | '/branch/$id'
    | '/events/$id'
    | '/users/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$notFound'
    | '/login'
    | '/branch/new'
    | '/events/new'
    | '/branch'
    | '/calendars'
    | '/events'
    | '/users'
    | '/branch/$id'
    | '/events/$id'
    | '/users/$id'
  id:
    | '__root__'
    | '/'
    | '/$notFound'
    | '/login'
    | '/branch/new'
    | '/events/new'
    | '/branch/'
    | '/calendars/'
    | '/events/'
    | '/users/'
    | '/branch/$id/'
    | '/events/$id/'
    | '/users/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotFoundRoute: typeof NotFoundRoute
  LoginRoute: typeof LoginRoute
  BranchNewRoute: typeof BranchNewRoute
  EventsNewRoute: typeof EventsNewRoute
  BranchIndexRoute: typeof BranchIndexRoute
  CalendarsIndexRoute: typeof CalendarsIndexRoute
  EventsIndexRoute: typeof EventsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  BranchIdIndexRoute: typeof BranchIdIndexRoute
  EventsIdIndexRoute: typeof EventsIdIndexRoute
  UsersIdIndexRoute: typeof UsersIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$notFound': {
      id: '/$notFound'
      path: '/$notFound'
      fullPath: '/$notFound'
      preLoaderRoute: typeof NotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/branch/new': {
      id: '/branch/new'
      path: '/branch/new'
      fullPath: '/branch/new'
      preLoaderRoute: typeof BranchNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/new': {
      id: '/events/new'
      path: '/events/new'
      fullPath: '/events/new'
      preLoaderRoute: typeof EventsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/branch/': {
      id: '/branch/'
      path: '/branch'
      fullPath: '/branch'
      preLoaderRoute: typeof BranchIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendars/': {
      id: '/calendars/'
      path: '/calendars'
      fullPath: '/calendars'
      preLoaderRoute: typeof CalendarsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/branch/$id/': {
      id: '/branch/$id/'
      path: '/branch/$id'
      fullPath: '/branch/$id'
      preLoaderRoute: typeof BranchIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/$id/': {
      id: '/events/$id/'
      path: '/events/$id'
      fullPath: '/events/$id'
      preLoaderRoute: typeof EventsIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$id/': {
      id: '/users/$id/'
      path: '/users/$id'
      fullPath: '/users/$id'
      preLoaderRoute: typeof UsersIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/$notFound' {
  const createFileRoute: CreateFileRoute<
    '/$notFound',
    FileRoutesByPath['/$notFound']['parentRoute'],
    FileRoutesByPath['/$notFound']['id'],
    FileRoutesByPath['/$notFound']['path'],
    FileRoutesByPath['/$notFound']['fullPath']
  >
}
declare module './routes/login' {
  const createFileRoute: CreateFileRoute<
    '/login',
    FileRoutesByPath['/login']['parentRoute'],
    FileRoutesByPath['/login']['id'],
    FileRoutesByPath['/login']['path'],
    FileRoutesByPath['/login']['fullPath']
  >
}
declare module './routes/branch/new' {
  const createFileRoute: CreateFileRoute<
    '/branch/new',
    FileRoutesByPath['/branch/new']['parentRoute'],
    FileRoutesByPath['/branch/new']['id'],
    FileRoutesByPath['/branch/new']['path'],
    FileRoutesByPath['/branch/new']['fullPath']
  >
}
declare module './routes/events/new' {
  const createFileRoute: CreateFileRoute<
    '/events/new',
    FileRoutesByPath['/events/new']['parentRoute'],
    FileRoutesByPath['/events/new']['id'],
    FileRoutesByPath['/events/new']['path'],
    FileRoutesByPath['/events/new']['fullPath']
  >
}
declare module './routes/branch/index' {
  const createFileRoute: CreateFileRoute<
    '/branch/',
    FileRoutesByPath['/branch/']['parentRoute'],
    FileRoutesByPath['/branch/']['id'],
    FileRoutesByPath['/branch/']['path'],
    FileRoutesByPath['/branch/']['fullPath']
  >
}
declare module './routes/calendars/index' {
  const createFileRoute: CreateFileRoute<
    '/calendars/',
    FileRoutesByPath['/calendars/']['parentRoute'],
    FileRoutesByPath['/calendars/']['id'],
    FileRoutesByPath['/calendars/']['path'],
    FileRoutesByPath['/calendars/']['fullPath']
  >
}
declare module './routes/events/index' {
  const createFileRoute: CreateFileRoute<
    '/events/',
    FileRoutesByPath['/events/']['parentRoute'],
    FileRoutesByPath['/events/']['id'],
    FileRoutesByPath['/events/']['path'],
    FileRoutesByPath['/events/']['fullPath']
  >
}
declare module './routes/users/index' {
  const createFileRoute: CreateFileRoute<
    '/users/',
    FileRoutesByPath['/users/']['parentRoute'],
    FileRoutesByPath['/users/']['id'],
    FileRoutesByPath['/users/']['path'],
    FileRoutesByPath['/users/']['fullPath']
  >
}
declare module './routes/branch/$id/index' {
  const createFileRoute: CreateFileRoute<
    '/branch/$id/',
    FileRoutesByPath['/branch/$id/']['parentRoute'],
    FileRoutesByPath['/branch/$id/']['id'],
    FileRoutesByPath['/branch/$id/']['path'],
    FileRoutesByPath['/branch/$id/']['fullPath']
  >
}
declare module './routes/events/$id/index' {
  const createFileRoute: CreateFileRoute<
    '/events/$id/',
    FileRoutesByPath['/events/$id/']['parentRoute'],
    FileRoutesByPath['/events/$id/']['id'],
    FileRoutesByPath['/events/$id/']['path'],
    FileRoutesByPath['/events/$id/']['fullPath']
  >
}
declare module './routes/users/$id/index' {
  const createFileRoute: CreateFileRoute<
    '/users/$id/',
    FileRoutesByPath['/users/$id/']['parentRoute'],
    FileRoutesByPath['/users/$id/']['id'],
    FileRoutesByPath['/users/$id/']['path'],
    FileRoutesByPath['/users/$id/']['fullPath']
  >
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotFoundRoute: NotFoundRoute,
  LoginRoute: LoginRoute,
  BranchNewRoute: BranchNewRoute,
  EventsNewRoute: EventsNewRoute,
  BranchIndexRoute: BranchIndexRoute,
  CalendarsIndexRoute: CalendarsIndexRoute,
  EventsIndexRoute: EventsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  BranchIdIndexRoute: BranchIdIndexRoute,
  EventsIdIndexRoute: EventsIdIndexRoute,
  UsersIdIndexRoute: UsersIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
