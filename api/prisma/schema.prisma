// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RolesForBranch {
  member
  branchManager
  branchSupport
  coach
}

type Roles {
  branchId String
  roles    RolesForBranch[]
}

enum GlobalRoles {
  admin
  unAssociated
  coachManager
  unAssignedCoach
}

model Users {
  id             String        @id @map("_id") @db.String
  fullName       String?
  email          String?       @unique
  hashedPassword String?
  rank           String?
  globalRoles    GlobalRoles[]
  branchRoles    Roles[]
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
}

type Funds {
  current Int @default(0)
  inflow  Int @default(0)
  outflow Int @default(0)
}

model Branch {
  id        String    @id @map("_id") @db.String
  name      String?
  coachIds  String[]
  funds     Funds?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Has many schedules
  schedules Schedules[]

  // Has many examinations
  examinations Examinations[]

  // Has many finances
  finances Finances[]
}

model Schedules {
  id        String    @id @map("_id") @db.String
  title     String?
  date      DateTime?
  material  String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Owned by 1 Branch
  branchId String? @db.String
  branch   Branch? @relation(fields: [branchId], references: [id])

  // Only have 1 Attendances
  attendance Attendances?
}

enum StatusType {
  present
  absence
}

type Details {
  id     String
  status StatusType
}

model Attendances {
  id        String    @id @map("_id") @db.String
  details   Details[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Owned by 1 Schedule
  scheduleId String?    @unique @db.String
  schedule   Schedules? @relation(fields: [scheduleId], references: [id])

  // Owned by 1 Events
  eventId String? @unique @db.String
  event   Events? @relation(fields: [eventId], references: [id])
}

type Participants {
  id   String
  rank String
}

type Score {
  kihon  String
  kata   String
  kumite String
  result String?
}

model Examinations {
  id           String         @id @map("_id") @db.String
  title        String?
  date         DateTime?
  participants Participants[]
  results      Score?         @map("results")
  examiners    String[]
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt

  // Owned by 1 Branch
  branchId String? @db.String
  branch   Branch? @relation(fields: [branchId], references: [id])
}

enum EventType {
  schedules
  examinations
  events
}

model Events {
  id           String         @id @map("_id") @db.String
  title        String?
  description  String?
  date         DateTime?
  type         EventType?
  branchIds    String[]
  participants Participants[]
  examiners    String[]
  results      Score?         @map("results")
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt

  // Only have 1 Attendances
  attendance Attendances?
}

enum Flow {
  credit
  debit
}

enum Category {
  operating
  investing
  financing
}

enum SubCategory {
  // operating
  monthlyMemberFee
  donation
  allowance
  salary
  venue
  consumableEquipment
  // investing
  assetsEquipment
  // financing
  memberLoan
  other
}

model Finances {
  id          String       @id @map("_id") @db.String
  date        DateTime?
  amount      Int?
  type        Flow?
  category    Category?
  subCategory SubCategory?
  description String?

  // Owned by 1 Branch
  branchId String? @db.String
  branch   Branch? @relation(fields: [branchId], references: [id])
}
